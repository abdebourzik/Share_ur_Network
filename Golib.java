// Code generated by gobind. DO NOT EDIT.

// Java class golib.Golib is a proxy for talking to a Go program.
//
//   autogenerated by gobind -lang=java share
package golib;

import go.Seq;

public abstract class Golib {
	static {
		Seq.touch(); // for loading the native library
		_init();
	}
	
	private Golib() {} // uninstantiable
	
	// touch is called from other bound packages to initialize this package
	public static void touch() {}
	
	private static native void _init();
	
	
	/**
	 * Handshake constants
	 */
	public static final String CLNT_HS = "PFCCLHS";
	/**
	 * Maximal number of clients per middle server
	 */
	public static final long MAX_CLIENTS_PER_MIDDLE_SERVER = 20000L;
	public static final String MDDL_HS = "PFCMSHS";
	
	/**
	 * ErrConnectionReset is sent if a stream is reset. This can happen
	if the backlog is exceeded, or if there was a remote GoAway.
	 */
	public static native void setErrConnectionReset(java.lang.Exception v);
	/**
	 * ErrConnectionReset is sent if a stream is reset. This can happen
	if the backlog is exceeded, or if there was a remote GoAway.
	 */
	public static native java.lang.Exception getErrConnectionReset();
	
	/**
	 * ErrConnectionWriteTimeout indicates that we hit the &#34;safety valve&#34;
	timeout writing to the underlying stream connection.
	 */
	public static native void setErrConnectionWriteTimeout(java.lang.Exception v);
	/**
	 * ErrConnectionWriteTimeout indicates that we hit the &#34;safety valve&#34;
	timeout writing to the underlying stream connection.
	 */
	public static native java.lang.Exception getErrConnectionWriteTimeout();
	
	/**
	 * ErrDuplicateStream is used if a duplicate stream is
	opened inbound
	 */
	public static native void setErrDuplicateStream(java.lang.Exception v);
	/**
	 * ErrDuplicateStream is used if a duplicate stream is
	opened inbound
	 */
	public static native java.lang.Exception getErrDuplicateStream();
	
	/**
	 * ErrInvalidMsgType means we received a frame with an
	invalid message type
	 */
	public static native void setErrInvalidMsgType(java.lang.Exception v);
	/**
	 * ErrInvalidMsgType means we received a frame with an
	invalid message type
	 */
	public static native java.lang.Exception getErrInvalidMsgType();
	
	/**
	 * ErrInvalidVersion means we received a frame with an
	invalid version
	 */
	public static native void setErrInvalidVersion(java.lang.Exception v);
	/**
	 * ErrInvalidVersion means we received a frame with an
	invalid version
	 */
	public static native java.lang.Exception getErrInvalidVersion();
	
	/**
	 * ErrKeepAliveTimeout is sent if a missed keepalive caused the stream close
	 */
	public static native void setErrKeepAliveTimeout(java.lang.Exception v);
	/**
	 * ErrKeepAliveTimeout is sent if a missed keepalive caused the stream close
	 */
	public static native java.lang.Exception getErrKeepAliveTimeout();
	
	/**
	 * ErrReceiveWindowExceeded indicates the window was exceeded
	 */
	public static native void setErrRecvWindowExceeded(java.lang.Exception v);
	/**
	 * ErrReceiveWindowExceeded indicates the window was exceeded
	 */
	public static native java.lang.Exception getErrRecvWindowExceeded();
	
	/**
	 * ErrRemoteGoAway is used when we get a go away from the other side
	 */
	public static native void setErrRemoteGoAway(java.lang.Exception v);
	/**
	 * ErrRemoteGoAway is used when we get a go away from the other side
	 */
	public static native java.lang.Exception getErrRemoteGoAway();
	
	/**
	 * ErrSessionShutdown is used if there is a shutdown during
	an operation
	 */
	public static native void setErrSessionShutdown(java.lang.Exception v);
	/**
	 * ErrSessionShutdown is used if there is a shutdown during
	an operation
	 */
	public static native java.lang.Exception getErrSessionShutdown();
	
	/**
	 * ErrStreamClosed is returned when using a closed stream
	 */
	public static native void setErrStreamClosed(java.lang.Exception v);
	/**
	 * ErrStreamClosed is returned when using a closed stream
	 */
	public static native java.lang.Exception getErrStreamClosed();
	
	/**
	 * ErrStreamsExhausted is returned if we have no more
	stream ids to issue
	 */
	public static native void setErrStreamsExhausted(java.lang.Exception v);
	/**
	 * ErrStreamsExhausted is returned if we have no more
	stream ids to issue
	 */
	public static native java.lang.Exception getErrStreamsExhausted();
	
	/**
	 * ErrTimeout is used when we reach an IO deadline
	 */
	public static native void setErrTimeout(NetError v);
	/**
	 * ErrTimeout is used when we reach an IO deadline
	 */
	public static native NetError getErrTimeout();
	
	/**
	 * ErrUnexpectedFlag is set when we get an unexpected flag
	 */
	public static native void setErrUnexpectedFlag(java.lang.Exception v);
	/**
	 * ErrUnexpectedFlag is set when we get an unexpected flag
	 */
	public static native java.lang.Exception getErrUnexpectedFlag();
	
	// skipped function Client with unsupported parameter or return types
	
	/**
	 * Connects to the middle server
	 */
	public static native void cnctToMS(String middleAddress, String clientId) throws Exception;
	// skipped function CnnctStrm with unsupported parameter or return types
	
	/**
	 * DefaultConfig is used to return a default configuration
	 */
	public static native Config defaultConfig();
	/**
	 * Generatest new client Id as a random string
	 */
	public static native String generateClientId();
	/**
	 * Returns client ID stored in the file
	 */
	public static native String getStoredIdFromFile() throws Exception;
	// skipped function HndlCnnect with unsupported parameter or return types
	
	/**
	 * Utility functions
	 */
	public static native String randomStringN(long n);
	// skipped function Server with unsupported parameter or return types
	
	/**
	 * Entry point
	 */
	public static native void start(String add);
	/**
	 * Saves client ID to the file
	 */
	public static native void storeIdToFile(String id) throws Exception;
	/**
	 * VerifyConfig is used to verify the sanity of configuration
	 */
	public static native void verifyConfig(Config config) throws Exception;
}
